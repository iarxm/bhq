#!/usr/bin/env bash

# iarom madden mail@iarom.org

rep=${1}
cmd=${2}
shift 2

gpg_dir="$HOME/.local/share/gnupg"
bkhq_c="$HOME/.config/bkhq"

prnt_h1() { printf "KY: %s\n" " " "########################" "$1"; }

prnt_h2() { printf "KY: %s\n" "----------------------" "$1"; }

prnt()    { printf "KY: %s\n" "$1"; }

prnt_ln() { printf "\n"; }

env_dva="$bkhq_c/env.dva"
env_dvb="$bkhq_c/env.dvb"
env_dvc="$bkhq_c/env.dvc"
env_dua="$bkhq_c/env.dua"
env_dub="$bkhq_c/env.dub"
env_duc="$bkhq_c/env.duc"

mkgpg()
{
    prnt "no gpg dir, creating it..."
    gpgconf --kill gpg-agent
    mkdir "$gpg_dir"
    ln -s $gpg_dir $HOME/.gnupg
    chmod 700 "$gpg_dir"
}

[ "$rep" ] || { prnt "no repo provided"; exit; }

[ "$cmd" ] || { prnt "no cmd provided"; exit; }

prnt_h1 "init ky sciprt..."

[ -d "$gpg_dir" ] || mkgpg

env_set()     { . $1 && prnt_h1 "$2: $KY_REPO"; }

case ${rep} in
    dva) env_set $env_dva "dva" ;;
    dvb) env_set $env_dvb "dvb" ;;
    dvc) env_set $env_dvc "dvc" ;;
    #dvd) KY_REPO="$mnt_x/dvd/.key" ;;
    dua) env_set $env_dua "dua" ;;
    dub) env_set $env_dub "dub" ;;
    duc) env_set $env_duc "duc" ;;
    #rma) KY_REPO="$HOME/.config/key" ;; # remoe a : todo: systemitise using shamir's algorithm
esac

# bk exp

gpg_bk_init()  { mkdir -p $KY_REPO; chmod 700 "$KY_REPO"; }

gpg_bk_pub()
{
    gpg --export --armor --export-options backup \
        --output "$KY_REPO/pubkeys.asc"
}

gpg_bk_prv()
{
    gpg --export-secret-keys --armor --export-options backup \
        --output "$KY_REPO/privatekeys.asc"
}

gpg_bk_trust() { gpg --export-ownertrust > "$KY_REPO/ownertrust.txt"; }

gpg_ls_bk()    { ls -al "$KY_REPO/"; }

gpg_bk()
{
    gpg_bk_init
    gpg_bk_pub
    gpg_bk_prv
    gpg_bk_trust
    gpg_ls_bk
}

# imp restore

gpg_imp_pub()
{
    prnt_h2 "importing Public Keys"
    gpg --import --import-options restore "$KY_REPO/pubkeys.asc"
}

gpg_imp_priv()
{
    prnt_h2 "importing Private Keys"
    gpg --import --import-options restore "$KY_REPO/privatekeys.asc"
}

gpg_imp_test()
{
    prnt_h2 "checking that Secret keys were imported"
    gpg -K
    
    prnt_h2 "checking that public keys were imported"
    gpg -k
}

gpg_imp_trust()
{
    prnt_h2 "importing ownertrust"
    gpg --import-ownertrust --import-options restore $KY_REPO/ownertrust.txt
}
    
gpg_imp_finish()
{
    prnt_h1 "Test encryption/decryption as the new user with the imported keys with:"
    prnt "gpg -er USERID"
    prnt "gpg -d"
    prnt "Don't su over to the new user; login directly via ssh or console; Otherwise decryption and signing will likely fail, if the user doesnt own the shell.."
}

gpg_imp()
{
    gpg_imp_pub
    gpg_imp_priv
    gpg_imp_test

    gpg_imp_trust
    gpg_imp_finish
}

case ${cmd} in
    exp|bk|bkp)    gpg_bk ;;
    imp)           gpg_imp ;;
esac

prnt_ln
