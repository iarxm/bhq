#!/bin/sh
# vim:ft=sh

###################################
# Author: Iarom Madden
#
# TODO: tidy up variables/parameters to be compaticle with integrated 'case' tool
# STATE:TODO
#
###################################

case $1 in 
	ml)
		tar -czpf $TARGET/root_$DATE.tar.gz --exclude={"/dev/*","/home/*","/proc/*","/sys/*","/tmp/*","/run/*","/mnt/*","/media/*","/lost+found/*"} /
		
		if [ `find $TARGET -name 'root*.tar.gz' | wc -l ` -gt 2 ]; then
		    cd $TARGET && rm "$(ls -t | tail -1)"
		fi

	;;
	sy)
		# full system backup
		
		# Backup destination
		backdest=$1
		
		# Labels for backup name
		#PC=${HOSTNAME}
		distro=arch
		type=full
		date=$(date "+%F")
		backupfile="$backdest/$distro-$type-$date.tar.gz"
		
		# Exclude file location
		prog=${0##*/} # Program name from filename
		excdir="/home/<user>/.bin/root/backup"
		exclude_file="$excdir/$prog-exc.txt"
		
		# Check if chrooted prompt.
		echo -n "First chroot from a LiveCD.  Are you ready to backup? (y/n): "
		read executeback
		
		# Check if exclude file exists
		if [ ! -f $exclude_file ]; then
		  echo -n "No exclude file exists, continue? (y/n): "
		  read continue
		  if [ $continue == "n" ]; then exit; fi
		fi
		
		if [ $executeback = "y" ]; then
		  # -p, --acls and --xattrs store all permissions, ACLs and extended attributes. 
		  # Without both of these, many programs will stop working!
		  # It is safe to remove the verbose (-v) flag. If you are using a 
		  # slow terminal, this can greatly speed up the backup process.
		  tar --exclude-from=$exclude_file --acls --xattrs -cpvf $backupfile /
		fi
		
	;;
esac
