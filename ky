#!/usr/bin/env bash
# Author: Iarom Madden


# declare ##############################

rep=${1}
cmd=${2}
shift 2

gpg_dir="$HOME/.local/share/gnupg"
mnt_x="$HOME/jf/zm"

prnt_h1() { printf "KY: %s\n" " " "########################" "$1"; }

prnt_h2() { printf "KY: %s\n" "----------------------" "$1"; }

prnt()    { printf "KY: %s\n" "$1"; }

prnt_ln() { printf "\n"; }

mkgpg()   {
	prnt "no gpg dir, creating it..."
	gpgconf --kill gpg-agent
	mkdir "$gpg_dir"
	ln -s $gpg_dir $HOME/.gnupg
	chmod 700 "$gpg_dir" ;}

# init ##############################

[ "$rep" ] || { prnt "no repo provided"; exit; }

[ "$cmd" ] || { prnt "no cmd provided"; exit; }

prnt_h1 "init ky sciprt..."

[ -d "$gpg_dir" ] || mkgpg


# repo ###############################

case ${rep} in
	dva) repo="$mnt_x/dva/.key" ;;
	dvb) repo="$mnt_x/dvb/.key" ;;
	dvc)
		printf "TODO \n" && exit
		repo="$mnt_x/dvc/.key" ;;
	dvd)
		printf "TODO \n" && exit
		repo="$mnt_x/dvd/.key" ;;
	lca)
		printf "TODO \n" && exit
		repo="$HOME/.config/key" ;;
esac


# bk exp ########################################

gpg_bk_pub() 		{ 
	gpg --export --armor --export-options \
		backup --output "$repo/pubkeys.asc"; }

gpg_bk_prv() 		{ 
	gpg --export-secret-keys --armor --export-options \
		backup --output "$repo/privatekeys.asc"; }

gpg_bk_trust() 	{ 
	gpg --export-ownertrust > "$repo/ownertrust.txt"; }

gpg_bk() {
	gpg_bk_pub
	gpg_bk_prv
	gpg_bk_trust ; }


# imp restore #####################################

gpg_imp_pub() {
	prnt_h2 "importing Public Keys"
	gpg --import --import-options restore "$repo/pubkeys.asc" ; }

gpg_imp_priv() {
	prnt_h2 "importing Private Keys"
	gpg --import --import-options restore "$repo/privatekeys.asc" ;}

gpg_imp_test() {
	prnt_h2 "checking that Secret keys were imported"
	gpg -K
	
	prnt_h2 "checking that public keys were imported"
	gpg -k ; }

gpg_imp_trust() {
    prnt_h2 "importing ownertrust"
    gpg --import-ownertrust --import-options restore $repo/ownertrust.txt ;}
	
gpg_imp_finish() {
	prnt_h1 "Test encryption/decryption as the new user with the imported keys with:"
	prnt "gpg -er USERID"
	prnt "gpg -d"
	prnt "Don't su over to the new user; login directly via ssh or console; Otherwise decryption and signing will likely fail, if the user doesnt own the shell.." ;}

gpg_imp() {
	gpg_imp_pub
	gpg_imp_priv
	gpg_imp_test

	gpg_imp_trust
	gpg_imp_finish ; }


# case ###########################################

case ${cmd} in
	exp) gpg_bk ;;
	imp) gpg_imp ;;
esac

prnt_ln

