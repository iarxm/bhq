#!/usr/bin/env bash

# Iarom Madden mail@iarom.org

# borg wrapper

#set -e -o pipefail
set -o pipefail

ini()
{
    #declare -g hostname="${HOST}"
    declare -g brg_opts_env_common=()
    declare -g brg_opts_env_init=()
    declare -g brg_opts_env_mount=()
    declare -g brg_opts_env_umount=()
    declare -g brg_opts_env_prune=()
    declare -g brg_opts_env_compact=()
    declare -g brg_opts_env_create=()
    declare -g args=()
    declare -g argx=()

    [ -f ${BHQC} ] \
        || { echo "missing bhq config; exiting"; exit; }

    source ${BHQC}
    _env_bhq
}

args_add()
{
    if [ -n "${1}" ]; then
        args+=( "${1}" )
    else
        return 0
    fi
}

args_brg_create()
{
    args_add "${brg_args_env_common}"
    args+=(
        "create"
        "--show-rc"
        "--list"
        "--stats"
        "--progress"
        "--exclude-from" "${BHQ_EXL_AAX}"
    )
    args_add "${argx}"
    args_add "${@}"
    args+=(
        "::$(date +%y-%m-%d_%H-%M)"
       "${SRC}/"
    )
}

prl()     { printf "\n"; }

prh()     { printf "BRG: %s \n" " " "${1}"; }

prn()     { printf "BRG: %s \n" "${@}"; }

prn_args()
{
    printf " borg\n"
    printf "    %s\n" "${args[@]}${YELLOW}"; prl
}

tst_args()
{
    [ -n ${args} ] \
        || { prn "no cmd" && exit; }
}

env_set()
{
    ${1}
    prl; prn "${BHQ_DEV}: ${BORG_REPO} {${BORG_PASSCOMMAND}}"
}

env_set_rem()
{
    # todo
    nm_mobile && exit 1 #todo: exit function printing message
    env_set "${1}"
}


brg_cmd() { exec borg "${args[@]}"; }

set_rep()
{
    case "${rep}" in
        dva)  env_set "_env_dva"  ;;
        dvb)  env_set "_env_dvb"  ;;
        dvx)  env_set "_env_dvx"  ;;
        lca)  env_set "_env_lca"  ;;
        wasa) env_set "_env_r_wia" ;;
        wasb) env_set "_rem_r_wib" ;;
        *)    prn "repo required" && exit
    esac
}

set_cmd()
{
    case ${cmd} in

    in|init)
        prn "init ${BORG_REPO}"; prnl
        args_add ${brg_args_env_common}
        args_add "init"
        args_add "${brg_opts_env_init}"
        args_add "${@}"
        ;;

    mn|mount|mnt|m)
        prn "mount ${BORG_REPO} on ${BORG_MOUNTPOINT}"; prl
        args_add "${brg_args_env_common}"
        args_add "mount"
        args_add "${brg_opts_env_mount}"
        args_add "${@}"
        args+=(
            "::"
            "${BORG_MOUNTPOINT}"
        )
        ;;

    un|umount|um|umnt)
        prn "umount ${BORG_MOUNTPOINT}"; prl
        args_add "${brg_args_env_common}"
        args_add "${@}"
        args+=(
            "umount"
            "${BORG_MOUNTPOINT}"
        )
        ;;

    prune)
        prn "prune ${BORG_REPO}"; prl
        args_add "${brg_args_env_common}"
        args_add "prune"
        args_add "${brg_opts_env_prune}"
        args_add "${@}"
        ;;

    compact)
        prn "prune ${BORG_REPO}"; prl
        args_add "${brg_args_env_common}"
        args_add "${@}"
        args_add "compact"
        ;;

    bf|backup-full|full)
        prn "src: full '${SRC}/'"; prl
        args_brg_create "${@}"
        ;;

    bm|backup-mid|bk-mid)
        prn "src: partial.mid '${SRC}/'"; prl
        argx+=( "--exclude-from" "${BHQ_EXL_ABX}" )
        args_brg_create "${@}"
        ;;
  
    bh|backup-home)
        #"Partial Home Backup # TODO
        prn "src: backup-home '${SRC}/'"
        #argx+=("")
        args_brg_create "${@}"
        prn "TODO"
        exit
        ;;
       
    bf-macro)
        # - https://borgbackup.readthedocs.io/en/stable/quickstart.html#automating-backups
        prn "full backup macro; create, prune, compact '${SRC}'/"

        trap 'echo $( date ) Backup interrupted >&2; exit 2' INT TERM

        ${0} ${rep} bf
        exit_backup=${?}
        ${0} ${rep} prune
        exit_prune=${?}
        ${0} ${rep} compact
        exit_compact=${?}

        exit_global=$(( exit_backup > exit_prune ? exit_backup : exit_prune ))
        exit_global=$(( exit_comapct > exit_global ? exit_compact : exit_global ))

        if [ ${exit_global} -eq 0 ]; then
            prn "Finished successfully"
        elif [ ${exit_global} -eq 1 ]; then
            prn "Finished with warnings"
        else
            prn "Finished with errors"
        fi

        exit "${exit_global}"
        ;;

    *)
        prn "custom command: ${cmd}"
        args_add "${brg_args_env_common}"
        args_add "${@}"
        tst_args
        ;;
    esac
}

main()
{
    rep="${1}"
    cmd="${2}"
    shift 2

    ini
    set_rep
    set_cmd "${@}"

    prn_args
    brg_cmd
}

main "${@}"
