#!/bin/env bash
# vim:ft=sh
# Author: Iarom Madden
# Backups main script
# #######################################

_init() {
  #bkpath="$HOME/.local/bin/fbk"
  #export PATH="$bkpath:$PATH"
  bkhq_c="$HOME/.config/bkhq"
  pkg_ls_dir="$HOME/.config/A.CONTROL/lsx" ;}


# decomp #############################################

prnt()  { printf "BKHQ: %s\n" "##########################" "$1"; }
prntx() { printf "BKHQ: %s\n" "$1"; }


# prep #################################################

_notif() {
  linex+=()
  linex+=("A. dsvv sync <dssy>?\n")
  linex+=("B. rclone 2 gdrive <min>?\n")
  linex+=("D. dva dvb snaps\n")
  linex+=("\nASYNCHRONOUS VITs:\n")
  linex+=("0. bkhq que..\n")
  linex+=("1. keys \n")
  linex+=("2. logs \n")
  linex+=("\nHABITS \n")
  linex+=("X. git commits (atomised)")
  liney=" ${linex[@]}"
  notify-send -u low "REGULAR VITs:" "${liney}" ;}
    
_bk_sys_prepare() {
  date=$(date +%y.%m.%d)
  lsn=$(pacman -Qqen)
  lsm=$(pacman -Qqem)
  printf "%s\n" $lsn > "/etc/ll/pacmanls$date.n.txt"
  printf "%s\n" $lsm > "/etc/ll/pacmanls$date.m.txt"
  printf "%s\n" $lsn > "$pkg_ls_dir/$date.n.txt"
  printf "%s\n" $lsm > "$pkg_ls_dir/$date.m.txt" ;}


# bksq ##################################################

_dev_lcl_vcs_xaa()   { rst lca bpmin; }   # local vcs/snapshots
_dev_lcl_vcs_xab()   { rst lca vc-xds; }
_dev_rem_par_min()   { yes | rst gcs bpmin; } # remote - part.min


# compounds

_dev_lcl_vcs_aaa() { # local version control
  prnt "init bkp '''lcas'''"
  _lcl_vcs_xaa
  _lcl_vcs_xab ;}
_dev_ext_eaa() {
  prnt "init bkp '''dvas'''"
  brg dva bf ;} #rsn dva  # sudo req #rs dva.pmin # sol?
_dev_ext_eba() {
  prnt "init bkp '''dvbs'''"
  brg dvb bk-mid ;} #rsn dvb #rs dvb.pmin
_dev_ext_ecc_aaa() { echo "";} # todo


# schedules

_reg_aaa() {
  _dev_lcl_vcs_xaa; }

_reg_aab() { # regular essentials
   prnt "init bkp '''essentials'''"
  _lcl_vcs_aaa
  _rem_par_min
  _notif ;}


# selectors

_dev_eaa() { _dev_ext_eaa; }
_dev_eba() { _dev_ext_eba; }
_dev_eca() { _dev_ext_eca; }
_dev_raa() { _dev_rem_raa; }
_dev_laa() { _dev_lcl_laa; }


# QUES ##############################################
# TODO: TIDY UP / FIX

_rst_que_cmd()  { rst "$repo" push "$1"; }

_rst_que_lpa()  { for i in $todo; do prntx "init snapshot bk ---> $1"; _rst_que_cmd "$i"; done }

_rst_que_tst()  { [ -n "$(grep -Ex "^$1$" "$que_done")" ] && { prntx "que: Completed: $1 \n"; return; }; }

_rst_que_main() { prntx "init snapshot bk ---> $1"; _rst_que_lpa; }

_rst_que_init() {
  repo="$1"
  que_done="$bkhq_c/que.don"
  que_todo="$bkhq_c/que.x"
  todo="$(cat $que_todo)"
  done="$(cat $que_done)" ;}

_rst_que_x () {
  _rst_que_init $1
  _rst_que_main ;}

que_rst_x () { #?
  src_dir="t"
  src_pth="/data/$src_dir"
  rst gcs push $src_pth ;}

# gcs_mod: for use in eg Bundoran library where many connections may break network.

# bkls ####################################################

bkls() {
  # Make lists of dir's based on their cumulative size
  # TODO: IN PROGRESS
  # ==============================
  # 1.
  #   - Create root associated folder in xfr.subls
  #   - Remove previous list in that folder if it exisits
  #   TODO - add if condition to 'remove'
  #   TODO - make dir if doesn't exist
  #   TODO - tidy up file/variable names here
  rut="${1}"
  ls_files_dir="$XDG_BIN_HOME/fbk/xfr.subls/$rut"
  rm -R $ls_files_dir/xfr.subls
  # 2.
  #   - Change to root dir
  #   - Create list of all dir's
  #   - Create empty list to feed them cumulatively into through the next loop
  #   - Setup a counter
  cd "${rut}"
  ls_a=$(find -type d -maxdepth 1)
  ls_b=()
  i=0
  size_cummu="0"
  # 3.
  #   - Increase counter on each iteration
  #   - IF: cumulative size < 15gb, then:
  #     - Append dir to tmp list
  #     - ELSE: Once cumulative size < 15gb
  #       1. Pipe current list to new list file
  #         - Create name based on dir number range
  #       2. Reset tmp ls with current dir as 1st arg
  #         - And set lower dir number for new ls range
  for dir_i in $ls_a; do
    i=$(($i+1))
    if [ -lt "$siz_cumu" 15gb ]; then
      ls_b+=$dir_i
      else
        i_b=$i
        file_name="dir.$i_a.to.$i_b"
        printf "$ls_b\n" > $ls_files_dir/$rut
        i_a=$i
        ls_b=($dir)
    fi
  done
}


# cmd ##################################################

_index() {
  case $cmd in
  tga)      _reg_aaa;; # very regular essentialls
  tgb)      _reg_aab;;
  laa)      _dev_lcl_vcs_aaa;; # local version control
  dva)      _dev_eaa;;
  dvb)      _dev_eba;;
  raa)      _dev_rem_par_min;;
  # maint ###################
  pre)      _bk_sys_prepare;;
  ky.c)     kys dvc exp ;;
  ky.d)     kys dvd exp ;;
  notif)    _notif ;;
  # ########################
  ls)       bkls $@;;
  a)        _rst_que_y gcs ;;
  b)        _rst_que_y gcsx ;;
  x)        que_rst_x ;;
  esac }

_main() {
  _init
  _index $@ ;}

cmd="$1" && shift 1

_main $@


#####################################
# naming specification
# {3-type}_{3-type_location}_{(1-type_loc}{1-loc}{method}}
# type: device or another thing altogether
# type_location: eg specific device
# method: specific functions/algorithms/technologies - eg composite of different restic and borg commands to associate with a specific device like an external drive designated for a particular function
# TODO #########################
# ADD TO NOTES:
# diskb: disk too full: choose between brg or rsn backup just for this one. And choose a partial set of /data
# do keys manually as not necessary to continously back them up. Once every while is enough, and automated backups in this regard may actually overwrite the required backup in case of local corruption.
# todo - configure way of selecting more formally
#   - perhaps a python script with the creation of class would allow for the import of specific commands to apply to specifically defined devices

